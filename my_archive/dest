d:../my_archive/
f:../my_archive/Makefile
## /*********************************************\
## |*  Makefile created by AutoHeader v. 0.4.2  *|
## |* https://github.com/FantinBibas/autoHeader *|
## \*********************************************/

CC	=	gcc

RM	=	rm -f

FLAGS	+=	

CPPFLAGS	+=	-I include/

CFLAGS	+=	-Wextra -Werror -Wall

NAME	=	my_archive

SRCS	=	my_archive.c	\
		my_strcat.c

OBJS	=	$(SRCS:.c=.o)

all:	$(NAME)

$(NAME):	$(OBJS)
	$(CC) $(OBJS) -o $(NAME) $(FLAGS)

clean:
	$(RM) $(OBJS)

fclean:	clean
	$(RM) $(NAME)

re:	fclean all

.PHONY:	all clean fclean re


~
f:../my_archive/my_strcat.c
/*
** my_strcat.c for  in /home/yannick.suc/rush/rush1/myunarchive
** 
** Made by suc yannick
** Login   <yannick.suc@epitech.net>
** 
** Started on  Fri Mar  3 23:17:20 2017 suc yannick
** Last update Sat Mar  4 01:56:27 2017 Pierre
*/
#include <string.h>
#include "my_strcat.h"

#include <stdlib.h>
char	*my_strcat(char *s1, char *s2)
{
  int	i;
  int	j;
  char	*new;

  if (s1 == NULL || s2 == NULL)
    return (NULL);
  new = malloc(sizeof(char) * (int) (strlen(s1) + strlen(s2) + 1));
  i = -1;
  while (s1[++i] != 0)
    {
      new[i] = s1[i];
    }
  j = -1;
  while (s2[++j] != 0)
    {
      new[i + j] = s2[j];
    }
  new[i + j] = 0;
  return (new);
}

~
f:../my_archive/my_archive.c
/*
** my_archive.c for  in /home/yannick.suc/Corewar/part1/step1
** 
** Made by suc yannick
** Login   <yannick.suc@epitech.net>
** 
** Started on  Tue Feb 28 10:16:33 2017 suc yannick
** Last update Sat Mar  4 04:10:37 2017 suc yannick
*/

#include "my_archive.h"

void	print_file(int fd, FILE *my_archive, char *name)
{
  struct stat	fileStat;
  char		*buff;

  fprintf(my_archive, "f:%s\n", name);
  fstat(fd, &fileStat);
  buff = malloc(sizeof(char) * (fileStat.st_size + 1));
  if (buff == NULL)
    {
      printf("Error with malloc\n");
      exit (84);
    }
  memset(buff, 0, fileStat.st_size + 1);
  if (read(fd, buff, fileStat.st_size) < 0)
    {
      printf("Error with read\n");
      exit (84);
    }
  if (buff[0] != 0)
    fprintf(my_archive, "%s\n", buff);
  fprintf(my_archive, "~\n");
  free(buff);
}

void		print_directory(DIR *dir, FILE *my_archive, char *path)
{
  struct dirent	*fileOrDir;
  char		*newPath;

  if (path[(int) strlen(path) - 1] != '/')
    path = my_strcat(path, "/");
  fprintf(my_archive, "d:%s\n", path);
  while ((fileOrDir = readdir(dir)) != NULL)
    {
      if (*fileOrDir->d_name != '.')
	{
	  newPath = my_strcat(path, fileOrDir->d_name);
	  if (fileOrDir->d_type == DT_DIR)
	    print_directory(opendir(newPath), my_archive, my_strcat(newPath, "/"));
	  else if (fileOrDir->d_type == DT_REG)
	    print_file(open(newPath, O_RDONLY), my_archive, newPath);
	  else
	    {
	      printf("%s : Not a file or a Directory\n", newPath);
	      exit (84);
	    }
	}
    }
  fprintf(my_archive, "<\n");
}

void	fill_archive(FILE *my_archive, char **list)
{
  DIR	*dir;
  int	file;

  while (*list != NULL)
    {
      if ((dir = opendir(*list)) != NULL)
	print_directory(dir, my_archive, *list);
      else if ((file = open(*list, O_RDONLY)) > 0)
	print_file(file, my_archive, *list);
      else
	{
	  printf("%s : Invalid file or Directory\n", *list);
	  exit(84);
	}
      free(*list);
      list++;
    }
}

int	main(int ac, char **av)
{
  FILE	*my_archive;
  
  if (ac < 3 || av[1] == NULL || av[2] == NULL)
    {
      printf("Usage: ./my_archive [archive_name] [files ...]\n");
      return (84);
    }
  if ((my_archive = fopen(av[1], "w+")) == NULL)
    {
      printf("Can't create an archive file\n");
      return (84);
    }
  fill_archive(my_archive, av + 2);
  fclose(my_archive);
  free(av);
  return (0);
}

~
d:../my_archive/include/
f:../my_archive/include/my_archive.h
/*********************************************\
|*   Header created by AutoHeader v. 0.4.2   *|
|* https://github.com/FantinBibas/autoHeader *|
\*********************************************/

#ifndef MY_ARCHIVE_H_
#  define MY_ARCHIVE_H_

#  include <string.h>
#  include <stdlib.h>
#  include <sys/types.h>
#  include <stdio.h>
#  include <sys/stat.h>
#  include <unistd.h>
#  include <dirent.h>
#  include <fcntl.h>

char *my_strcat(char *, char *);

#endif /* !MY_ARCHIVE_H_ */
~
f:../my_archive/include/my_strcat.h
/*********************************************\
|*   Header created by AutoHeader v. 0.4.2   *|
|* https://github.com/FantinBibas/autoHeader *|
\*********************************************/

#ifndef MY_STRCAT_H_
#  define MY_STRCAT_H_

#  include <string.h>
#  include <stdlib.h>


#endif /* !MY_STRCAT_H_ */
~
<
f:../my_archive/my_strcat.o
ELF
~
f:../my_archive/dest
d:../my_archive/
f:../my_archive/Makefile
## /*********************************************\
## |*  Makefile created by AutoHeader v. 0.4.2  *|
## |* https://github.com/FantinBibas/autoHeader *|
## \*********************************************/

CC	=	gcc

RM	=	rm -f

FLAGS	+=	

CPPFLAGS	+=	-I include/

CFLAGS	+=	-Wextra -Werror -Wall

NAME	=	my_archive

SRCS	=	my_archive.c	\
		my_strcat.c

OBJS	=	$(SRCS:.c=.o)

all:	$(NAME)

$(NAME):	$(OBJS)
	$(CC) $(OBJS) -o $(NAME) $(FLAGS)

clean:
	$(RM) $(OBJS)

fclean:	clean
	$(RM) $(NAME)

re:	fclean all

.PHONY:	all clean fclean re


~
f:../my_archive/my_strcat.c
/*
** my_strcat.c for  in /home/yannick.suc/rush/rush1/myunarchive
** 
** Made by suc yannick
** Login   <yannick.suc@epitech.net>
** 
** Started on  Fri Mar  3 23:17:20 2017 suc yannick
** Last update Sat Mar  4 01:56:27 2017 Pierre
*/
#include <string.h>
#include "my_strcat.h"

#include <stdlib.h>
char	*my_strcat(char *s1, char *s2)
{
  int	i;
  int	j;
  char	*new;

  if (s1 == NULL || s2 == NULL)
    return (NULL);
  new = malloc(sizeof(char) * (int) (strlen(s1) + strlen(s2) + 1));
  i = -1;
  while (s1[++i] != 0)
    {
      new[i] = s1[i];
    }
  j = -1;
  while (s2[++j] != 0)
    {
      new[i + j] = s2[j];
    }
  new[i + j] = 0;
  return (new);
}

~
f:../my_archive/my_archive.c
/*
** my_archive.c for  in /home/yannick.suc/Corewar/part1/step1
** 
** Made by suc yannick
** Login   <yannick.suc@epitech.net>
** 
** Started on  Tue Feb 28 10:16:33 2017 suc yannick
** Last update Sat Mar  4 04:10:37 2017 suc yannick
*/

#include "my_archive.h"

void	print_file(int fd, FILE *my_archive, char *name)
{
  struct stat	fileStat;
  char		*buff;

  fprintf(my_archive, "f:%s\n", name);
  fstat(fd, &fileStat);
  buff = malloc(sizeof(char) * (fileStat.st_size + 1));
  if (buff == NULL)
    {
      printf("Error with malloc\n");
      exit (84);
    }
  memset(buff, 0, fileStat.st_size + 1);
  if (read(fd, buff, fileStat.st_size) < 0)
    {
      printf("Error with read\n");
      exit (84);
    }
  if (buff[0] != 0)
    fprintf(my_archive, "%s\n", buff);
  fprintf(my_archive, "~\n");
  free(buff);
}

void		print_directory(DIR *dir, FILE *my_archive, char *path)
{
  struct dirent	*fileOrDir;
  char		*newPath;

  if (path[(int) strlen(path) - 1] != '/')
    path = my_strcat(path, "/");
  fprintf(my_archive, "d:%s\n", path);
  while ((fileOrDir = readdir(dir)) != NULL)
    {
      if (*fileOrDir->d_name != '.')
	{
	  newPath = my_strcat(path, fileOrDir->d_name);
	  if (fileOrDir->d_type == DT_DIR)
	    print_directory(opendir(newPath), my_archive, my_strcat(newPath, "/"));
	  else if (fileOrDir->d_type == DT_REG)
	    print_file(open(newPath, O_RDONLY), my_archive, newPath);
	  else
	    {
	      printf("%s : Not a file or a Directory\n", newPath);
	      exit (84);
	    }
	}
    }
  fprintf(my_archive, "<\n");
}

void	fill_archive(FILE *my_archive, char **list)
{
  DIR	*dir;
  int	file;

  while (*list != NULL)
    {
      if ((dir = opendir(*list)) != NULL)
	print_directory(dir, my_archive, *list);
      else if ((file = open(*list, O_RDONLY)) > 0)
	print_file(file, my_archive, *list);
      else
	{
	  printf("%s : Invalid file or Directory\n", *list);
	  exit(84);
	}
      free(*list);
      list++;
    }
}

int	main(int ac, char **av)
{
  FILE	*my_archive;
  
  if (ac < 3 || av[1] == NULL || av[2] == NULL)
    {
      printf("Usage: ./my_archive [archive_name] [files ...]\n");
      return (84);
    }
  if ((my_archive = fopen(av[1], "w+")) == NULL)
    {
      printf("Can't create an archive file\n");
      return (84);
    }
  fill_archive(my_archive, av + 2);
  fclose(my_archive);
  free(av);
  return (0);
}

~
d:../my_archive/include/
f:../my_archive/include/my_archive.h
/*********************************************\
|*   Header created by AutoHeader v. 0.4.2   *|
|* https://github.com/FantinBibas/autoHeader *|
\*********************************************/

#ifndef MY_ARCHIVE_H_
#  define MY_ARCHIVE_H_

#  include <string.h>
#  include <stdlib.h>
#  include <sys/types.h>
#  include <stdio.h>
#  include <sys/stat.h>
#  in
~
f:../my_archive/my_archive.o
ELF
~
f:../my_archive/my_archive
ELF
~
<
